openapi: 3.1.0
info:
  title: API Documentation
  description: Documentation for API endpoints
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
      - user-controller
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
      - user-controller
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/posts/{id}:
    get:
      tags:
      - post-controller
      operationId: getPostById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDTO'
    put:
      tags:
      - post-controller
      operationId: updatePost
      parameters:
      - name: files
        in: query
        required: true
        schema:
          type: array
          items:
            type: string
            format: binary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDTO'
    delete:
      tags:
      - post-controller
      operationId: deletePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/users:
    get:
      tags:
      - user-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/users/{id}/avatar:
    post:
      tags:
      - user-controller
      operationId: uploadAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/reposts:
    get:
      tags:
      - repost-controller
      operationId: getAllReposts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepostDTO'
    post:
      tags:
      - repost-controller
      operationId: createRepost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepostDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepostDTO'
  /api/posts:
    get:
      tags:
      - post-controller
      operationId: getAllPosts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDTO'
    post:
      tags:
      - post-controller
      operationId: createPost
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      - name: text
        in: query
        required: true
        schema:
          type: string
      - name: files
        in: query
        required: true
        schema:
          type: array
          items:
            type: string
            format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDTO'
  /api/messages:
    get:
      tags:
      - message-controller
      operationId: getAllMessages
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDTO'
    post:
      tags:
      - message-controller
      operationId: createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageDTO'
  /api/likes:
    get:
      tags:
      - like-controller
      operationId: getAllLikes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LikeDTO'
    post:
      tags:
      - like-controller
      operationId: createLike
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LikeDTO'
  /api/images/upload:
    post:
      tags:
      - image-controller
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/files:
    get:
      tags:
      - file-controller
      operationId: getAllFiles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDTO'
    post:
      tags:
      - file-controller
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileDTO'
  /api/comments:
    get:
      tags:
      - comment-controller
      operationId: getAllComments
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDTO'
    post:
      tags:
      - comment-controller
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDTO'
  /api/chats:
    get:
      tags:
      - chat-controller
      operationId: getAllChats
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatDTO'
    post:
      tags:
      - chat-controller
      operationId: createChat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ChatDTO'
  /api/reposts/{id}:
    get:
      tags:
      - repost-controller
      operationId: getRepostById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepostDTO'
    delete:
      tags:
      - repost-controller
      operationId: deleteRepost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/public/hello:
    get:
      tags:
      - test-controller
      operationId: publicHello
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/private/hello:
    get:
      tags:
      - test-controller
      operationId: privateHello
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/messages/{id}:
    get:
      tags:
      - message-controller
      operationId: getMessageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageDTO'
    delete:
      tags:
      - message-controller
      operationId: deleteMessage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/media/{filename}:
    get:
      tags:
      - media-controller
      operationId: getMediaFile
      parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/likes/{id}:
    get:
      tags:
      - like-controller
      operationId: getLikeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LikeDTO'
    delete:
      tags:
      - like-controller
      operationId: deleteLike
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/images/{filename}:
    get:
      tags:
      - image-controller
      operationId: getImage
      parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/files/{id}:
    get:
      tags:
      - file-controller
      operationId: getFileById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileDTO'
    delete:
      tags:
      - file-controller
      operationId: deleteFile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/comments/{id}:
    get:
      tags:
      - comment-controller
      operationId: getCommentById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDTO'
    delete:
      tags:
      - comment-controller
      operationId: deleteComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/chats/{id}:
    get:
      tags:
      - chat-controller
      operationId: getChatById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ChatDTO'
    delete:
      tags:
      - chat-controller
      operationId: deleteChat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        role:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        patronymic:
          type: string
        appointment:
          type: string
        birthday:
          type: string
          format: date
        avatarUrl:
          type: string
    PostDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdWhen:
          type: string
          format: date-time
        title:
          type: string
        text:
          type: string
        mediaUrls:
          type: array
          items:
            type: string
        userId:
          type: integer
          format: int64
    RepostDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        targetChatId:
          type: integer
          format: int64
    MessageDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdWhen:
          type: string
          format: date-time
        text:
          type: string
        status:
          type: string
        chatId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    LikeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    FileDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fileName:
          type: string
        filePath:
          type: string
        fileType:
          type: string
        uploadedWhen:
          type: string
          format: date-time
        uploadedBy:
          type: integer
          format: int64
    CommentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdWhen:
          type: string
          format: date-time
        postId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        textToComm:
          type: string
        answerToComm:
          type: string
    ChatDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        chatType:
          type: string
        chatName:
          type: string
        createdWhen:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
